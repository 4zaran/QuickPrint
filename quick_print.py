# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QuickPrint
                                 A QGIS plugin
 Quick Print plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-28
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Karol Chanaj
        email                : karol.chanaj3@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from qgis.core import *
from qgis.utils import iface
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtWidgets import *
from .quick_print_dialog import *

# Initialize Qt resources from file resources.py
from .resources import *


# Import the code for the dialog

class QuickPrintFormContainer:
    def __init__(self, title="Print title", scale_numeric=True, scale_linear=True, legend=True, north_arrow=True, notes="", orientation=0, pageSize="A4", filePath=""):
        self.title = title
        self.scale_numeric = scale_numeric
        self.scale_linear = scale_linear
        self.legend = legend
        self.north_arrow = north_arrow
        self.notes = notes
        self.orientation = orientation
        self.pageSize = pageSize
        self.filePath = filePath

def create_layout(layoutName, manager, project):
    print("Creating layout...")
    layout = QgsPrintLayout(project)
    layout.initializeDefaults()
    layout.setName(layoutName)

    #remove existing layout and add new
    layouts_list = manager.printLayouts()
    for lyout in layouts_list:
        if layout.name() == layoutName:
            manager.removeLayout(lyout)

    manager.addLayout(layout)
    return layout

def create_map(layout, legend):
    print("Creating map...")
    map = QgsLayoutItemMap(layout)
    map.setFrameEnabled(True)
    map.setRect(20, 20, 20, 20)
    layout.addLayoutItem(map)
    return map

def resize_map(map, pageSize, isLegendChecked, areNotesChecked, notesBottomPointY):
    legendPresent =  not isLegendChecked
    notesPresent = not areNotesChecked
    #calculating position and scale based on page size
    pageWidth = pageSize.width()
    pageHeight = pageSize.height()
    mapPositionX = pageWidth * 0.02
    if areNotesChecked:
        mapPositionY = notesBottomPointY + 2
        #mapPositionY = pageHeight * 0.076
        mapScaleY = ((pageHeight - (mapPositionY + 7.5)) / pageHeight) * pageHeight
    else:
        mapPositionY = notesBottomPointY
        #mapPositionY = notesBottomPointY
        mapScaleY = ((pageHeight - (mapPositionY + 7.5)) / pageHeight) * pageHeight
        #mapScaleY = pageHeight * 0.85
    if legendPresent:
        mapScaleX = pageWidth * 0.96
    else:
        mapScaleX = pageWidth * 0.78
    map.attemptMove(QgsLayoutPoint(mapPositionX, mapPositionY, QgsUnitTypes.LayoutMillimeters))
    map.attemptResize(QgsLayoutSize(mapScaleX, mapScaleY, QgsUnitTypes.LayoutMillimeters))
    map.zoomToExtent(iface.mapCanvas().fullExtent())
    return map

def create_legend(layout, map, pluginFont):
    print("Creating legend...")
    #creating legend
    legend = QgsLayoutItemLegend(layout)
    legend.setTitle("Legenda")
    legend.setLinkedMap(map)
    #set style
    legend.setLegendFilterByMapEnabled(1)
    legend.setStyleFont(QgsLegendStyle.Title, QFont(pluginFont, 14, 81))
    legend.setStyleFont(QgsLegendStyle.Group, QFont(pluginFont, 11, 75))
    legend.setStyleFont(QgsLegendStyle.Subgroup, QFont(pluginFont, 10, 63))
    legend.setStyleFont(QgsLegendStyle.SymbolLabel, QFont(pluginFont, 10))
    layout.addLayoutItem(legend)
    #set position
    pageSize = layout.pageCollection().page(0).pageSize()
    positionX = pageSize.width() * 0.81
    positionY = pageSize.height() * 0.12
    legend.attemptMove(QgsLayoutPoint(positionX, positionY, QgsUnitTypes.LayoutMillimeters))
    #return legend
    pass

def create_north_arrow(layout, map):
    print("Adding north arrow...")
    mapPosition = map.positionWithUnits()
    mapSize = map.sizeWithUnits()
    #create arrow
    north = QgsLayoutItemPicture(layout)
    north.setPicturePath(":/images/north_arrows/layout_default_north_arrow.svg")
    north.setLinkedMap(map)
    layout.addLayoutItem(north)
    #set position
    pageSize = layout.pageCollection().page(0).pageSize()
    positionX = mapPosition.x() + mapSize.width() - 20
    positionY = mapPosition.y() + mapSize.height() - 20
    north.attemptResize(QgsLayoutSize(10, 10, QgsUnitTypes.LayoutMillimeters))
    north.attemptMove(QgsLayoutPoint(positionX, positionY, QgsUnitTypes.LayoutMillimeters))
    pass

def create_linear_scale(layout, map, pluginFont):
    print("Adding scale bar...")
    scaleBar = QgsLayoutItemScaleBar(layout)
    scaleBar.setStyle('Line Ticks Middle')  # optionally modify the style
    scaleBar.setLinkedMap(map)  # map is an instance of QgsLayoutItemMap
    scaleBar.setFont(QFont(pluginFont, 9))
    scaleBar.setBoxContentSpace(0)
    scaleBar.setLabelBarSpace(1)
    scaleBar.setHeight(1)
    scaleBar.setSubdivisionsHeight(2)
    scaleBar.setMaximumBarWidth(60)
    scaleBar.setSegmentSizeMode(1)
    scaleBar.setSubdivisionsHeight(1)
    scaleBar.applyDefaultSize()
    layout.addLayoutItem(scaleBar)

    pageSize = layout.pageCollection().page(0).pageSize()
    positionX = pageSize.width() * 0.03
    positionY = pageSize.height() - 7.5
    scaleBar.attemptMove(QgsLayoutPoint(positionX, positionY, QgsUnitTypes.LayoutMillimeters))
    scaleBar.attemptResize(QgsLayoutSize(69.198, 6.041, QgsUnitTypes.LayoutMillimeters))
    pass

def create_numeric_scale(layout, map, pluginFont):
    scaleText = QgsLayoutItemLabel(layout)
    scaleText.setText("Skala 1:" + "{:.0f}".format(map.scale()))
    scaleText.setFont(QFont(pluginFont, 11))
    scaleText.setReferencePoint(QgsLayoutItem.UpperMiddle)
    scaleText.adjustSizeToText()
    layout.addLayoutItem(scaleText)

    pageSize = layout.pageCollection().page(0).pageSize()
    mapSize = map.sizeWithUnits()
    mapPosition = map.positionWithUnits()
    positionX = mapPosition.x() + (mapSize.width() / 2.0)
    positionY = pageSize.height() - 7.5
    scaleText.attemptMove(QgsLayoutPoint(positionX, positionY, QgsUnitTypes.LayoutMillimeters))  # allows moving text box
    pass

def create_title(titleText, layout, pluginFont):
    print("Adding title...")
    title = QgsLayoutItemLabel(layout)
    title.setText(titleText)
    title.setFont(QFont(pluginFont, 28))
    title.adjustSizeToText()
    layout.addLayoutItem(title)

    pageSize = layout.pageCollection().page(0).pageSize()
    positionX = pageSize.width() * 0.03
    positionY = pageSize.height() * 0.02
    title.attemptMove(QgsLayoutPoint(positionX, positionY, QgsUnitTypes.LayoutMillimeters))
    return positionY + title.sizeForText().height()

def create_notes(notesText, layout, pluginFont, positionY):
    print("Adding notes...")
    notes = QgsLayoutItemLabel(layout)
    notes.setText(notesText)
    notes.setFont(QFont(pluginFont, 11))
    notes.adjustSizeToText()
    layout.addLayoutItem(notes)

    pageSize = layout.pageCollection().page(0).pageSize()
    positionX = pageSize.width() * 0.03
    #positionY = pageSize.height() * 0.07
    notes.attemptMove(QgsLayoutPoint(positionX, positionY, QgsUnitTypes.LayoutMillimeters))  # allows moving text box
    #notes.attemptResize(QgsLayoutSize(228.7, 12, QgsUnitTypes.LayoutMillimeters))
    return positionY + notes.sizeForText().height()
    pass

def export(layout, filePath, preview=False):
    print("Exporting...")
    exporter = QgsLayoutExporter(layout)
    fname, fileExtension = os.path.splitext(filePath)
    if preview:
        base_path = os.path.join(QgsProject.instance().homePath())
        preview_path = os.path.join(base_path, "preview.png")
        layout.renderContext().setDpi(75)
        exportError = exporter.exportToImage(preview_path, QgsLayoutExporter.ImageExportSettings())
    else:
        if fileExtension == ".pdf":
            exportError = exporter.exportToPdf(filePath, QgsLayoutExporter.PdfExportSettings())
        elif fileExtension == ".png" or fileExtension == ".jpg":
            exportError = exporter.exportToImage(filePath, QgsLayoutExporter.ImageExportSettings())
        elif fileExtension == ".svg":
            exportError = exporter.exportToSvg(filePath, QgsLayoutExporter.SvgExportSettings())
        else:
            print( "upsi..." )
            return -1
    return exportError

def generate_map(mapParameters: QuickPrintFormContainer, preview=False):
    # === INIT ===
    print("Initialization...")

    pluginFont = "MS Shell Dlg 2"
    layoutName = "QuickPrintLayout"

    project = QgsProject.instance()
    manager = project.layoutManager()
    layout = create_layout(layoutName, manager, project)

    pc = layout.pageCollection()
    pc.page(0).setPageSize(mapParameters.pageSize, mapParameters.orientation)

    map = create_map(layout, mapParameters.legend)

    # === LEGEND ===
    if mapParameters.legend:
        create_legend(layout, map, pluginFont)


    # === TITLE ===
    titleBottomPointY = create_title(mapParameters.title, layout, pluginFont)

    # === NOTES ===
    notesBottomPointY = create_notes(mapParameters.notes, layout, pluginFont, titleBottomPointY)

    # setting size of map
    pageSize = layout.pageCollection().page(0).pageSize()

    if mapParameters.notes:
        resize_map(map, pageSize, mapParameters.legend, mapParameters.notes, notesBottomPointY)
    else:
        resize_map(map, pageSize, mapParameters.legend, mapParameters.notes, titleBottomPointY)

    # === NUMERIC SCALE ===
    if mapParameters.scale_numeric:
        create_numeric_scale(layout, map, pluginFont)

    # === SCALE BAR ===
    if mapParameters.scale_linear:
        create_linear_scale(layout, map, pluginFont)

    # === NORTH ARROW ===
    if mapParameters.north_arrow:
        create_north_arrow(layout, map)

    # === EXPORT ===
    export_failure = export(layout, mapParameters.filePath, preview)
    if preview:
        base_path = os.path.join(QgsProject.instance().homePath())
        preview_path = os.path.join(base_path, "preview.png")
        """
        scene = QGraphicsScene()
        scene.setBackgroundBrush(QColor.fromRgb(235,235,235));
        image = QPixmap(preview_path)
        sceneRect = self.dlg.previewBox.mapToScene(self.dlg.previewBox.rect()).boundingRect()
        image2 = image.scaled(sceneRect.width()-5, sceneRect.height()-5, 1, 1)
        scene.addPixmap(image2)
        self.dlg.previewBox.setScene(scene)
        """
    else:
        if export_failure == 0:
            iface.messageBar().pushMessage("Sukces", "Plik eksportowano pomyślnie!", level=Qgis.Success, duration=3)

    print("Done!")
    pass


class QuickPrint:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QuickPrint_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Quick Print')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QuickPrint', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/quick_print/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Quick Print'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Quick Print'),
                action)
            self.iface.removeToolBarIcon(action)

    def updatePreview(self):
        base_path = os.path.join(QgsProject.instance().homePath())
        preview_path = os.path.join(base_path, "preview.png")
        scene = QGraphicsScene()
        scene.setBackgroundBrush(QColor.fromRgb(235,235,235));
        image = QPixmap(preview_path)
        sceneRect = self.dlg.previewBox.mapToScene(self.dlg.previewBox.rect()).boundingRect()
        image2 = image.scaled(sceneRect.width()-5, sceneRect.height()-5, 1, 1)
        scene.addPixmap(image2)
        self.dlg.previewBox.setScene(scene)

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Wybierz plik do zapisu","wydruk", "Obraz (*.png *.jpg);;Dokument PDF (*.pdf);;Grafika wektorowa SVG (*.svg)")
        self.dlg.outputFileBox.setText(filename)

    def accept(self, preview=False):
        # zapis wartości
        fileName = self.dlg.outputFileBox.text()
        print(preview)
        if not fileName and not preview:
            iface.messageBar().pushMessage("Error", "Ścieżka do pliku nie może być pusta!", level=Qgis.Critical)
        else:
            titleText = self.dlg.titleBox.text()
            annotationsText = self.dlg.annotationsBox.text()
            numericScale = self.dlg.numericScaleBox.checkState()
            linearScale = self.dlg.linearScaleBox.checkState()
            legend = self.dlg.legendBox.checkState()
            northArrow = self.dlg.arrowBox.checkState()
            pageSize = self.dlg.sizeBox.currentText()
            orientation = self.dlg.orientationBox.currentIndex()  # 0 - pozioma, 1 - pionowa

            mapParameters = QuickPrintFormContainer(titleText, numericScale, linearScale, legend, northArrow, annotationsText, orientation, pageSize, fileName)
            #select_output_file(self)
            generate_map(mapParameters, preview)
            if preview:
                self.updatePreview()
        """
        DEBUG
        print("Rozmiar strony: " + str(pageSize))
        print("Orientacja: " + str(orientation))
        print("Tytuł wydruku: " + titleText)
        print("Adnotacje: " + annotationsText)
        print("Skala numeryczna: " + str(numericScale))
        print("Legenda: " + str(legend))
        print("Strzałka północy: " + str(northArrow))
        print("Orientacja: " + str(orientation))
        """

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = QuickPrintDialog()
            self.dlg.acceptButtons.accepted.connect(self.accept)
            self.dlg.outputFileButton.clicked.connect(self.select_output_file)
            self.dlg.previewButton.clicked.connect(lambda: self.accept(True))



        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
