# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QuickPrint
                                 A QGIS plugin
 Quick Print plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-28
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Karol Chanaj
        email                : karol.chanaj3@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import platform
import subprocess

from enum import Enum, auto
from qgis.utils import iface
from qgis.PyQt.QtGui import QIcon, QFont, QColor, QPixmap
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtWidgets import *
from qgis.gui import QgsMapToolZoom, QgsMapToolPan
from qgis.core import QgsProject, QgsLayoutItem, Qgis, QgsLayoutItemPicture, QgsLayoutItemScaleBar, \
    QgsPrintLayout, QgsLayoutItemMap, QgsLayoutItemLabel, QgsLegendStyle, QgsLayoutItemLegend, \
    QgsLayoutPoint, QgsUnitTypes, QgsLayoutSize, QgsLayoutExporter, QgsCoordinateReferenceSystem

from .quick_print_dialog import *


class SheetFormat(Enum):
    A0_FORMAT = "A0"
    A1_FORMAT = "A1"
    A2_FORMAT = "A2"
    A3_FORMAT = "A3"
    A4_FORMAT = "A4"
    A5_FORMAT = "A5"
    A6_FORMAT = "A6"
    B0_FORMAT = "B0"
    B1_FORMAT = "B1"
    B2_FORMAT = "B2"
    B3_FORMAT = "B3"
    B4_FORMAT = "B4"
    B5_FORMAT = "B5"
    B6_FORMAT = "B6"


# object containing parameters from window
class QuickPrintFormContainer:
    def __init__(self, title="Print title", scale_numeric=True, scale_linear=True, legend=True,
                 north_arrow=True, notes="", orientation=0, page_size=SheetFormat.A4_FORMAT,
                 file_path="", custom_extent=False, custom_extent_mode=0, preview=False):
        self.title = title
        self.scale_numeric = scale_numeric
        self.scale_linear = scale_linear
        self.legend = legend
        self.north_arrow = north_arrow
        self.notes = notes
        self.orientation = orientation
        self.pageSize = page_size
        self.filePath = file_path
        self.customExtent = custom_extent
        self.customExtentMode = custom_extent_mode
        self.pluginFont = ""
        self.preview = preview


# layout-generating class
class QuickPrintLayout:
    def __init__(self, map_parameters: QuickPrintFormContainer):
        self.map_parameters = map_parameters
        self.project = QgsProject.instance()
        self.manager = self.project.layoutManager()
        self.layout = self.create_layout("QuickPrintLayout")
        self.map_parameters.pluginFont = "MS Shell Dlg 2"
        self.pageCollection = self.layout.pageCollection()
        self.pageCollection.page(0).setPageSize(map_parameters.pageSize, map_parameters.orientation)

        self.map = self.create_map()
        self.title, self.title.bottomPoint = self.create_title()

        if self.map_parameters.notes:
            self.notes, self.notes.bottomPoint = self.create_notes()
        if self.map_parameters.legend:
            self.legend = self.create_legend()

        self.resize_map()

        if self.map_parameters.legend:
            self.set_legend_position()
        if self.map_parameters.scale_numeric:
            self.numeric_scale = self.create_numeric_scale()
        if self.map_parameters.scale_linear:
            self.scaleBar = self.create_linear_scale()
        if self.map_parameters.north_arrow:
            self.north_arrow = self.create_north_arrow()

    def export(self):
        export_failure = self.export()
        if not self.map_parameters.preview:
            if export_failure == 0:
                iface.messageBar().pushMessage("Sukces", "Plik eksportowano pomyślnie!",
                                               level=Qgis.Success, duration=3)
            else:
                iface.messageBar().pushMessage("Błąd!", "Wystąpił błąd podczas eksportowania pliku!",
                                               level=Qgis.Critical, duration=3)

    def create_layout(self, layout_name):
        layout = QgsPrintLayout(self.project)
        layout.initializeDefaults()
        layout.setName(layout_name)

        # remove existing layout
        layouts_list = self.manager.printLayouts()
        for lyout in layouts_list:
            if layout.name() == layout_name:
                self.manager.removeLayout(lyout)

        # and add new
        self.manager.addLayout(layout)
        return layout

    def create_map(self):
        new_map = QgsLayoutItemMap(self.layout)
        new_map.setFrameEnabled(True)
        new_map.setRect(20, 20, 20, 20)
        self.layout.addLayoutItem(new_map)
        return new_map

    def resize_map(self):
        # calculating position and scale based on page size
        page_width = self.pageCollection.page(0).pageSize().width()
        page_height = self.pageCollection.page(0).pageSize().height()
        map_position_x = page_width * 0.02

        # if notes are visible
        if self.map_parameters.notes:
            map_position_y = self.notes.bottomPoint + 2
            # map_position_y = page_height * 0.076
            map_scale_y = ((page_height - (map_position_y + 7.5)) / page_height) * page_height
        else:
            map_position_y = self.title.bottomPoint
            # map_position_y = notesBottomPointY
            map_scale_y = ((page_height - (map_position_y + 7.5)) / page_height) * page_height
            # map_scale_y = page_height * 0.85

        # if legend is checked
        if self.map_parameters.legend:
            map_scale_x = page_width * 0.78
        else:
            map_scale_x = page_width * 0.96

        # mode of getting custom view; 0 == fit to sheet size, 1 == strictly set the aspect of the map to square
        if self.map_parameters.customExtentMode == 1:
            if map_scale_x < map_scale_y:
                map_scale_y = map_scale_x
            else:
                map_scale_x = map_scale_y

        # move and resize the map
        self.map.attemptMove(QgsLayoutPoint(map_position_x, map_position_y, QgsUnitTypes.LayoutMillimeters))
        self.map.attemptResize(QgsLayoutSize(map_scale_x, map_scale_y, QgsUnitTypes.LayoutMillimeters))
        # set the zoom
        self.map.zoomToExtent(self.map_parameters.customExtent)

    def create_legend(self):
        # creating legend
        legend = QgsLayoutItemLegend(self.layout)
        legend.setTitle("Legenda")
        legend.setLinkedMap(self.map)
        legend.adjustBoxSize()
        legend.refresh()
        # set style
        legend.setLegendFilterByMapEnabled(1)
        legend.setStyleFont(QgsLegendStyle.Title, QFont(self.map_parameters.pluginFont, 14, 81))
        legend.setStyleFont(QgsLegendStyle.Group, QFont(self.map_parameters.pluginFont, 11, 10))
        legend.setStyleFont(QgsLegendStyle.Subgroup, QFont(self.map_parameters.pluginFont, 10, 10))
        legend.setStyleFont(QgsLegendStyle.SymbolLabel, QFont(self.map_parameters.pluginFont, 10))
        self.layout.addLayoutItem(legend)
        return legend

    def set_legend_position(self):
        map_position = self.map.positionWithUnits()
        map_size = self.map.sizeWithUnits()
        position_x = map_position.x() + map_size.width() + 2.5
        position_y = map_position.y()
        self.legend.attemptMove(QgsLayoutPoint(position_x, position_y, QgsUnitTypes.LayoutMillimeters))

    def create_north_arrow(self):
        # create arrow
        north = QgsLayoutItemPicture(self.layout)
        north.setPicturePath(":/images/north_arrows/layout_default_north_arrow.svg")
        north.setLinkedMap(self.map)
        self.layout.addLayoutItem(north)
        # set position
        map_position = self.map.positionWithUnits()
        map_size = self.map.sizeWithUnits()
        position_x = map_position.x() + map_size.width() - 20
        position_y = map_position.y() + map_size.height() - 20
        north.attemptResize(QgsLayoutSize(10, 10, QgsUnitTypes.LayoutMillimeters))
        north.attemptMove(QgsLayoutPoint(position_x, position_y, QgsUnitTypes.LayoutMillimeters))
        return north

    def create_linear_scale(self):
        # set style
        scale_bar = QgsLayoutItemScaleBar(self.layout)
        scale_bar.setStyle('Line Ticks Middle')  # optionally modify the style
        scale_bar.setLinkedMap(self.map)  # map is an instance of QgsLayoutItemMap
        scale_bar.setFont(QFont(self.map_parameters.pluginFont, 9))
        scale_bar.setBoxContentSpace(0)
        scale_bar.setLabelBarSpace(1)
        scale_bar.setHeight(1)
        scale_bar.setSubdivisionsHeight(2)
        scale_bar.setMaximumBarWidth(60)
        scale_bar.setSegmentSizeMode(1)
        scale_bar.setSubdivisionsHeight(1)
        scale_bar.applyDefaultSize()
        self.layout.addLayoutItem(scale_bar)
        # scale and position
        page_size = self.layout.pageCollection().page(0).pageSize()
        position_x = page_size.width() * 0.03
        position_y = page_size.height() - 7.5
        scale_bar.attemptMove(QgsLayoutPoint(position_x, position_y, QgsUnitTypes.LayoutMillimeters))
        scale_bar.attemptResize(QgsLayoutSize(69.198, 6.041, QgsUnitTypes.LayoutMillimeters))
        return scale_bar

    def create_numeric_scale(self):
        # create label
        scale_text = QgsLayoutItemLabel(self.layout)
        # get map scale and set text
        scale_text.setText("Skala 1:" + "{:.0f}".format(self.map.scale()))
        # set style
        scale_text.setFont(QFont(self.map_parameters.pluginFont, 11))
        scale_text.setReferencePoint(QgsLayoutItem.UpperMiddle)
        scale_text.adjustSizeToText()
        self.layout.addLayoutItem(scale_text)
        # set position and scale
        page_size = self.layout.pageCollection().page(0).pageSize()
        map_size = self.map.sizeWithUnits()
        map_position = self.map.positionWithUnits()
        position_x = map_position.x() + (map_size.width() / 2.0)
        position_y = page_size.height() - 7.5
        scale_text.attemptMove(QgsLayoutPoint(position_x, position_y, QgsUnitTypes.LayoutMillimeters))
        return scale_text

    def create_title(self):
        # create and set style
        title = QgsLayoutItemLabel(self.layout)
        title.setText(self.map_parameters.title)
        title.setFont(QFont(self.map_parameters.pluginFont, 28))
        title.adjustSizeToText()
        self.layout.addLayoutItem(title)
        # move
        page_size = self.layout.pageCollection().page(0).pageSize()
        position_x = page_size.width() * 0.03
        position_y = page_size.height() * 0.02
        title.attemptMove(QgsLayoutPoint(position_x, position_y, QgsUnitTypes.LayoutMillimeters))
        return title, position_y + title.sizeForText().height()

    def create_notes(self):
        # create and set style
        notes = QgsLayoutItemLabel(self.layout)
        notes.setText(self.map_parameters.notes)
        notes.setFont(QFont(self.map_parameters.pluginFont, 11))
        notes.adjustSizeToText()
        self.layout.addLayoutItem(notes)
        # move
        page_size = self.layout.pageCollection().page(0).pageSize()
        position_y = self.title.bottomPoint
        position_x = page_size.width() * 0.03
        notes.attemptMove(QgsLayoutPoint(position_x, position_y, QgsUnitTypes.LayoutMillimeters))
        # returns notes object and its bottom point on layout
        return notes, position_y + notes.sizeForText().height()

    def export(self):
        exporter = QgsLayoutExporter(self.layout)
        # get path and extension
        fname, file_extension = os.path.splitext(self.map_parameters.filePath)
        # if its a preview - export to png in a project folder
        if self.map_parameters.preview:
            base_path = os.path.join(QgsProject.instance().homePath())
            preview_path = os.path.join(base_path, "preview.png")
            self.layout.renderContext().setDpi(75)
            export_error = exporter.exportToImage(preview_path,
                                                  QgsLayoutExporter.ImageExportSettings())
        else:
            if file_extension == ".pdf":
                export_error = exporter.exportToPdf(self.map_parameters.filePath,
                                                    QgsLayoutExporter.PdfExportSettings())
            elif file_extension in (".png", ".jpg"):
                export_error = exporter.exportToImage(self.map_parameters.filePath,
                                                      QgsLayoutExporter.ImageExportSettings())
            elif file_extension == ".svg":
                export_error = exporter.exportToSvg(self.map_parameters.filePath,
                                                    QgsLayoutExporter.SvgExportSettings())
            else:
                iface.messageBar().pushMessage("Błąd!", "Błędne rozszerzenie pliku!", level=Qgis.Critical, duration=3)
                return -1
        return export_error


class QuickPrint:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QuickPrint_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Quick Print')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QuickPrint', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/quick_print/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Quick Print'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Quick Print'),
                action)
            self.iface.removeToolBarIcon(action)

    def change_map_view_option(self, indx):
        if indx == 1:
            self.dlg.customExtent.setCurrentIndex(1)
            self.dlg.customExtentMode.setEnabled(True)

    def enable_extent_list(self, indx):
        if indx == 0:
            self.dlg.customExtentMode.setEnabled(False)
        else:
            self.dlg.customExtentMode.setEnabled(True)

    def open_file(self):
        filepath = self.dlg.outputFileBox.text()
        if platform.system() == 'Darwin':  # macOS
            subprocess.call(('open', filepath))
        elif platform.system() == 'Windows':  # Windows
            os.startfile(filepath)
        else:  # linux variants
            subprocess.call(('xdg-open', filepath))

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Wybierz plik do zapisu", "wydruk",
            "Obraz (*.png *.jpg);;Dokument PDF (*.pdf);;Grafika wektorowa SVG (*.svg)")
        self.dlg.outputFileBox.setText(filename)

    def setup_map_canvas(self):
        checked_layers = [layer.name() for layer in QgsProject().instance().layerTreeRoot().children() if
                          layer.isVisible()]

        # add only checked layers
        layers_to_add = [layer for layer in QgsProject().instance().mapLayers().values() if
                         layer.name() in checked_layers]
        # add all layers
        # layers_to_add = QgsProject().instance().mapLayers().values()
        self.dlg.mapCanvas.setLayers(layers_to_add)

        self.dlg.mapCanvas.setWheelFactor(1.1)
        self.dlg.mapCanvas.setExtent(iface.mapCanvas().extent())

    def update_preview(self):
        base_path = os.path.join(QgsProject.instance().homePath())
        preview_path = os.path.join(base_path, "preview.png")
        scene = QGraphicsScene()
        scene.setBackgroundBrush(QColor.fromRgb(235, 235, 235))
        image = QPixmap(preview_path)
        scene_rect = self.dlg.previewBox.mapToScene(self.dlg.previewBox.rect()).boundingRect()
        image2 = image.scaled(scene_rect.width() - 5, scene_rect.height() - 5, 1, 1)
        scene.addPixmap(image2)
        self.dlg.previewBox.setScene(scene)

    def zoom_in(self):
        self.dlg.mapCanvas.setMapTool(self.toolZoomIn)

    def zoom_out(self):
        self.dlg.mapCanvas.setMapTool(self.toolZoomOut)

    def pan(self):
        self.dlg.mapCanvas.setMapTool(self.toolPan)

    def accept(self, preview=False):

        # changing to preview tab
        self.dlg.tabWidget.setCurrentIndex(0)

        file_name = self.dlg.outputFileBox.text()
        if not file_name and not preview:
            iface.messageBar().pushMessage("Error", "Ścieżka do pliku nie może być pusta!", level=Qgis.Critical)
        else:
            # choosing what map should render - custom view or fit all checked layers
            custom_extent_button = self.dlg.customExtent.currentIndex()
            if custom_extent_button:
                custom_extent = self.dlg.mapCanvas.extent()
            else:
                custom_extent = iface.mapCanvas().fullExtent()

            # get parameters from window
            annotations_text = self.dlg.annotationsBox.text()
            legend = self.dlg.legendBox.checkState()
            linear_scale = self.dlg.linearScaleBox.checkState()
            custom_extent_mode = self.dlg.customExtentMode.currentIndex()
            north_arrow = self.dlg.arrowBox.checkState()
            numeric_scale = self.dlg.numericScaleBox.checkState()
            orientation = self.dlg.orientationBox.currentIndex()  # 0 - pozioma, 1 - pionowa
            page_size = self.dlg.sizeBox.currentText()
            title_text = self.dlg.titleBox.text()
            # create object holding all the values
            map_parameters = QuickPrintFormContainer(title_text, numeric_scale, linear_scale, legend,
                                                     north_arrow, annotations_text, orientation, page_size,
                                                     file_name, custom_extent, custom_extent_mode, preview)

            # generate map
            plugin_layout = QuickPrintLayout(map_parameters)
            plugin_layout.export()

            if preview:
                self.update_preview()
            if self.dlg.openFileCheck.checkState() and not preview:
                self.open_file()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = QuickPrintDialog()
            # connect all buttons with their functions
            self.dlg.acceptButtons.accepted.connect(self.accept)
            self.dlg.zoomInButton.clicked.connect(self.zoom_in)
            self.dlg.zoomOutButton.clicked.connect(self.zoom_out)
            self.dlg.panButton.clicked.connect(self.pan)
            self.dlg.outputFileButton.clicked.connect(self.select_output_file)
            self.dlg.previewButton.clicked.connect(lambda: self.accept(True))
            self.dlg.tabWidget.currentChanged.connect(self.change_map_view_option)
            self.dlg.customExtent.currentIndexChanged.connect(self.enable_extent_list)
            self.dlg.mapCanvas.setCanvasColor(Qt.white)
            self.dlg.mapCanvas.enableAntiAliasing(True)
            # create map tools
            self.toolZoomOut = QgsMapToolZoom(self.dlg.mapCanvas, True)  # true = out
            self.toolZoomIn = QgsMapToolZoom(self.dlg.mapCanvas, False)  # false = in
            self.toolPan = QgsMapToolPan(self.dlg.mapCanvas)

            for format in list(SheetFormat):
                self.dlg.sizeBox.insertItem(self.dlg.sizeBox.count(), format.value)
                if format.value == "A4":
                    self.dlg.sizeBox.setCurrentIndex(self.dlg.sizeBox.count()-1)

        self.setup_map_canvas()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # show a message that exporting is in progress
            pass
